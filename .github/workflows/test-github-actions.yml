name: AI Code Reviewer Example

on:
  pull_request:
    branches:
      - main
      - develop

jobs:
  review:
    runs-on: ubuntu-latest

    permissions:
      pull-requests: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install jq
        run: sudo apt-get install -y jq

      - name: Detect Changed Files
        id: changed_files
        run: |
          git fetch origin main --depth=1 || true
          
          # Find the base commit (merge-base between the PR branch and main)
          BASE_COMMIT=$(git merge-base HEAD origin/main || echo "")
          
          # If no base commit is found (e.g., first commit on branch), use HEAD~1
          if [ -z "$BASE_COMMIT" ]; then
            echo "No base commit found, using previous commit instead."
            BASE_COMMIT=HEAD~1
          fi

          # Get only the changed files
          git diff --name-only "$BASE_COMMIT" > changed_files.txt || true

          echo "Changed files:"
          cat changed_files.txt

      - name: Run Reka AI Code Review
        env:
          OPEN_ROUTER_API_KEY: ${{ secrets.OPEN_ROUTER_API_KEY }}
        run: |
          echo "[]" > review_comments.json

          while read -r FILE; do
            [[ -f "$FILE" ]] || continue

            echo "Reviewing $FILE..."
            CONTENT=$(head -n 1000 "$FILE" | jq -Rs .)  # Limit to 1000 lines

            REVIEW=$(curl -s -X POST "https://openrouter.ai/api/v1/chat/completions" \
              -H "Authorization: Bearer $OPEN_ROUTER_API_KEY" \
              -H "Content-Type: application/json" \
              -d "{
                \"model\": \"rekaai/reka-flash-3:free\",
                \"messages\": [{\"role\": \"user\", \"content\": \"Review the given code and suggest improvements:\n$CONTENT\"}]
              }" | jq -r '.choices[0].message.content')

            echo "Review Output: $REVIEW"

            jq --arg file "$FILE" --arg comment "$REVIEW" \
              '. + [{"file": $file, "comment": $comment}]' \
              review_comments.json > temp.json && mv temp.json review_comments.json

          done < changed_files.txt

      - name: Post Review Comments to PR
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          PR_NUMBER: ${{ github.event.pull_request.number }}
          GITHUB_REPO: ${{ github.repository }}
        run: |
          COMMIT_ID=$(curl -s -H "Authorization: token $GITHUB_TOKEN" \
            "https://api.github.com/repos/$GITHUB_REPO/pulls/$PR_NUMBER" | jq -r '.head.sha')

          jq -c '.[]' review_comments.json | while IFS= read -r line; do
            FILE=$(echo "$line" | jq -r '.file')
            COMMENT=$(echo "$line" | jq -r '.comment')
            POSITION=$(echo "$line" | jq -r '.position')
            IN_REPLY_TO=$(echo "$line" | jq -r '.in_reply_to')

            # Ensure comment is not null
            if [[ "$COMMENT" == "null" || -z "$COMMENT" ]]; then
              COMMENT="All codes are reviewed good"
            fi

            # Ensure position is valid
            if [[ "$POSITION" == "null" || -z "$POSITION" ]]; then
              # Try to get a valid line number from GitHub PR diff
              LINE=$(curl -s -H "Authorization: token $GITHUB_TOKEN" \
                "https://api.github.com/repos/$GITHUB_REPO/pulls/$PR_NUMBER/files" | \
                jq --arg file "$FILE" -r '.[] | select(.filename == $file) | .changes')

              # If line is null, set a default random line number
              if [[ "$LINE" == "null" || -z "$LINE" ]]; then
                LINE=$((RANDOM % 20 + 1))  # Random line between 1-20
              fi

              POSITION="$LINE"
            fi

            echo "Posting comment on $FILE at line $POSITION: $COMMENT"

            # Build payload
            if [[ "$IN_REPLY_TO" != "null" && "$IN_REPLY_TO" != "" ]]; then
              PAYLOAD=$(jq -n --arg body "$COMMENT" --arg in_reply_to "$IN_REPLY_TO" \
                '{body: $body, in_reply_to: $in_reply_to}')
            else
              PAYLOAD=$(jq -n --arg body "$COMMENT" --arg commit_id "$COMMIT_ID" --arg file "$FILE" --argjson position "$POSITION" \
                '{body: $body, commit_id: $commit_id, path: $file, position: $position}')
            fi

            # Send request
            curl -X POST -H "Authorization: token $GITHUB_TOKEN" \
                -H "Accept: application/vnd.github.v3+json" \
                -d "$PAYLOAD" \
                "https://api.github.com/repos/$GITHUB_REPO/pulls/$PR_NUMBER/comments"

          done